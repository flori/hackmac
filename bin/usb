#!/usr/bin/env ruby
#
# USB Installer Script
#
# This script prepares a USB drive for macOS installation by:
# - Formatting the USB device with GPT partition scheme
# - Creating a bootable installer using Apple's createinstallmedia tool
# - Mounting the EFI partition and initializing a git repository
#
# Example: usb /dev/disk2
#
# Requirements:
# - USB device must be at least 16GB
# - macOS installer package must be present in config
# - User must have administrator privileges
#
# Environment Variables:
#   HACKMAC_CONFIG - Path to configuration file (default: ~/.config/hackmac/config.yml)
#
# This script performs destructive operations and should be used with caution.

require 'hackmac'
include Hackmac
include Utils

# The usage method displays help information and exits the program
#
# This method prints a usage message to the standard output that includes
# the command name and available options, then terminates execution with
# a status code of 1
def usage
  puts <<~EOT

    Usage #{File.basename($0)} [USB DEVICE]

    Set HACKMAC_CONFIG to the config file, e. g. ~/.config/hackmac/foobar.yml

  EOT
  exit 1
end

$config = Hackmac::Config.load

dev = ARGV.shift or usage

dev = File.basename(dev)

mountpoint     = $config.usb.mp
mountpoint_efi = '/Volumes/%s' % $config.devices.usb.name
unless File.exist?($config.usb.os)
  fail "Cannot find #{$config.usb.os.inspect}!"
end
cim = "#{$config.usb.os}/Contents/Resources/createinstallmedia"
unless File.exist?(cim)
  fail "Cannot find #{cim.inspect}!"
end
ask("Really erase #{dev.inspect} and install #{$config.usb.os.inspect}? (y/n) ") or exit

x %{diskutil partitionDisk #{dev.inspect} GPT JHFS+ "USB" 100%}

x %{sudo #{cim.inspect} --volume #{mountpoint.inspect} --nointeraction}

x %{sudo mkdir -p #{mountpoint_efi.inspect}}
x %{sudo mount -t msdos #{('/dev/' + dev + 's1').inspect} #{mountpoint_efi.inspect}}

cd mountpoint_efi do
  x %{sudo chown $USER .}
  x %{git init}
  x %{git remote add origin #{$config.efi.source.inspect}}
  x %{git pull origin --set-upstream #{($config.efi.source_branch? || 'master').inspect}}
end
